# -*- coding: utf-8 -*-
"""Projeto_IA_acidentes_SUB

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1stfObu9OScKvSrMu0FGyhomXctzVVPV2



# Base de dados
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score
from sklearn.dummy import DummyClassifier

URL = "https://raw.githubusercontent.com/MarcelloBBottaro/SUB_IA_Base/main/dadosNovo_final_revisado.csv"

#Importando dados

dados = pd.read_csv(URL, encoding = 'unicode_escape', sep = ";")

dados.head()

#Excluindo colunas 

dados = dados.drop(columns = ["envolvidos","sexo","nascimento","passageiro"], axis = 1)
dados.head()

#Renomeando colunas

dados.rename({"desc_severidade":"fatal","Embreagues" : "embreagues"}, axis=1, inplace=True)
dados

#Trocar dados p/ binários

a_trocar = {
    "FATAL" : 1 ,
    "NAO FATAL" : 0
    
    }
dados.fatal= dados.fatal.map(a_trocar)


a_trocar = {
    "SIM" : 1 ,
    "NÃO" : 0
    
    }
dados. embreagues= dados. embreagues.map(a_trocar)

a_trocar = {
    "SIM" : 1 ,
    "NÃO" : 0
    
    }
dados.cinto_seguranca= dados.cinto_seguranca.map(a_trocar)
dados

"""# Treino/teste/acurácia 1

"""

x = dados [["cinto_seguranca","embreagues"]]          
y= dados["fatal"] 

treino_x = x[:70]
treino_y = y[:70]

teste_x = x[70:]
teste_y = y[70:]

print (f"Treino: {len(treino_x)} e Teste: {len(teste_x)}")

modelo = LinearSVC()
modelo.fit(treino_x, treino_y)

previsoes = modelo.predict (teste_x)

acuracia = accuracy_score(teste_y, previsoes)*100
print (f"Acuracia : {acuracia:.2f}")

"""# Treino/teste/acurácia 2"""

x = dados[['cinto_seguranca','embreagues']]
y = dados ['fatal']

SEED = 20
np.random.seed(SEED)
treino_x, teste_x, treino_y, teste_y = train_test_split(x, y, test_size = 0.30,
                                                         stratify = y)
print(f"Treinamento: {len(treino_x)} | Teste: {len(teste_x)}")

print (f"Treino: {len(treino_x)} - Teste {len(teste_x)}")


modelo= LinearSVC()
modelo.fit(treino_x, treino_y)

previsoes = modelo.predict(teste_x)
aacuracia = accuracy_score(teste_y, previsoes)
print(f"A acuracia: {acuracia*100:.2f}%")

"""# Treino/teste/acurácia 3"""

dummy_stratified = DummyClassifier()
dummy_stratified.fit(treino_x, treino_y)
previsoes2 = dummy_stratified.predict(teste_x)

acuracia2 = accuracy_score (teste_y, previsoes2)*100
print(f"Acuracia Dummy Stratified: {acuracia2:.2f}")
